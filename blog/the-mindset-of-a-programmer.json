{"html":"<p>There's a famous saying that goes:</p>\n<blockquote>\n  <p>Tragedy + Time = Comedy</p>\n</blockquote>\n<p>As with Tragedy, Mathematics also changes when Time is applied.<br />\nOne such possible transformation is:</p>\n<blockquote>\n  <p>Mathematics + Time = Programming</p>\n</blockquote>\n<p>And, as with Tragedy and Comedy, Mathematics makes me want to cry, and seeing my own Programming attempts always brings a good laugh.</p>\n<p>Enough metaphors that don't work. What has time to do in the relationship bewteen Mathematics and Programming?</p>\n<h2 id=\"hardships\">Hardships</h2>\n<p>Every program that you write can be interpreted as a mathematical object, in the appropriate context. This relationship is obvious in pure contexts. For instance, the Curry-Howard correspondence gives a pretty neat bridge between these two worlds by interpreting types—very much present in functional programming today—as mathematical statements.</p>\n<p>In fact, programming languages can be seen as just a convenient notation for conveying relatively pure mathematical ideas.</p>\n<p>Why is it, then, that many students of Computer Science struggle with mathematical ideas very much related to the programming concepts they are used to?</p>\n<p>First of all, and this is the obvious answer, because Computer Science is many times not taught with the structure and rigor of pure Mathematics. This is neither objectively better nor worse, it's just the way it is. One does not introduce a programming course with definitions or makes logical deductions from elementary axioms, at least not most of the time. We tend to think of Mathematics as something that <em>exists</em>, and of Programming as something that is <em>done</em>. The key here is the fact that Computer Science is often conceptualized to revolve around, well, computers. And, this is not a lie, but it's many times a distraction; a fabrication to make us feel more attached to the ground than we really are. The abstract idea of a computer is a purely mathematical idea. Modern computers where first thought out on paper, and then implemented as physical objects.</p>\n<p>To the senses of a programmer, it's usually desirable to forgo this material view of the computer and abstract environmental details away. This is the job of a mathematician too: to file a raw idea until there's only a bare core left.</p>\n<p>So, what is it about computers that makes us think this way of programs?</p>\n<p>It's time. Well, rather, it's <strong>state</strong>. Any computer scientist fears this word, as it is a harbinger of trouble. Computers have a state: they have a memory populated with a particular configuration of bytes, they have a processor that makes steps following a program, and they have a set of interfaces with the (stateful) outside world.</p>\n<p>IDEAS:<br />\nnon-constructive mathematics -&gt; constructive mathematics<br />\nrequires the same type of thought as<br />\nimperative programming -&gt; functional programming</p>","metadata":{"title":"The Mindset of a Programmer","slug":"the-mindset-of-a-programmer","date":"2020-11-25T00:00:00.000Z","tags":null,"summary":"TODO"},"filename":"20201125-the-mindset-of-a-programmer.md","path":"/home/runner/work/website/website/src/routes/blog/_posts/20201125-the-mindset-of-a-programmer.md"}